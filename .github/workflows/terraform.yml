name: IVS Inspector Prerequisites Deployment Pipeline with GitHub Actions

on: 
  workflow_dispatch:
    account_id:
      description: 'Provide Account ID'     
      required: true
      default: 'account_id'
    branch:
      description: 'Provide Region'     
      required: true
      default: 'region'
  # push:
  #   branches:
  #     - 'main'
  #     - 'release/**'

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: terraform_admin
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout the repositoring to the runner
        uses: actions/checkout@v3

      - name: Setup Terraform with specific version on the the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2

      - name: Terraform init
        id: init
        run: terraform init -backend-config="./backend-configs/ap-south-1.conf"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      # - uses: actions/github-script@v7
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
      #       <details><summary>Show Plan</summary>
  
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
  
      #       </details>
      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform plan status
      #   id: plan_status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false        